@page "/"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using ImpossibleSurvivalRace2.Hubs
@using ImpossibleSurvivalRace2.Services
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using Blazor.Extensions.Canvas.Canvas2D
@using ImpossibleSurvivalRace2.Models
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime


<PageTitle>Lobby</PageTitle>

<div class="form-group" hidden="@HasJoinedLobby">
    <div class="form-group">
        <button id="buttonCenter" class="btn btn-primary" @onclick="JoinExistingLobby">Join existing lobby</button>
        <label >
            Lobby code:
            <input  @bind="codeInput" />
        </label>
    </div>
    <button id="buttonCenter" class="btn btn-success" @onclick="InitiateNewLobby">Create new lobby</button>

</div>

<div class="form-group" hidden="@(!HasJoinedLobby)">
    <p>Current lobby: <b>@currentLobbyCode</b></p>

    <p>Lobby messages:</p>
    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>

    <BECanvas Width="@Width" Height="@Height"  @ref="_canvasReference"> </BECanvas>

</div>

@code {
    Canvas2DContext _context;
    BECanvasComponent _canvasReference;
    int outer;
    int inner;
    int Width=500;
    int Height=500;
    string color="red";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        outer=10;
        inner = 40;
        this._context = await _canvasReference.CreateCanvas2DAsync();

        //isorinis loopas
        Line line1 = new Line(outer, outer, outer, Height, 3, "brown");
        await DrawLine(_context, line1);

        Line line2 = new Line(outer, Height, Width, Height, 3, "brown");
        await DrawLine(_context, line2);

        Line line3 = new Line(Width, Height, Width, outer, 3, "brown");
        await DrawLine(_context, line3);

        Line line4 = new Line(Width, outer, outer, outer, 3, "brown");
        await DrawLine(_context, line4);

        //vidinis loopas
        Line line5 = new Line(inner, inner, inner, Height-inner, 3, "brown");
        await DrawLine(_context, line5);

        Line line6 = new Line(inner, Height-inner, Width-inner, Height-inner, 3, "brown");
        await DrawLine(_context, line6);

        Line line7 = new Line(Width-inner, Height-inner, Width-inner, inner, 3, "brown");
        await DrawLine(_context, line7);

        Line line8 = new Line(Width-inner, inner,inner, inner, 3, "brown");
        await DrawLine(_context, line8);

        //start line
        Line line9 = new Line(outer, Height - inner, inner, Height - inner, 3, "red");
        await DrawLine(_context, line9);

        /*
         * 
      
        //player 1 dot
        await _context.BeginPathAsync();
        await _context.ArcAsync(outer, outer, 5, 12, Math.PI*2, true);
        await _context.FillAsync();
        await _context.StrokeAsync();
        await _context.SetFillStyleAsync(color);
        await _context.ClosePathAsync();
        //player 2 dot
        await _context.BeginPathAsync();
        await _context.ArcAsync(Width, outer, 5, 12, Math.PI*2, true);
        await _context.FillAsync();
        await _context.StrokeAsync();
        await _context.SetFillStyleAsync("green");
        await _context.ClosePathAsync();
         * 
         */

    }

    private bool CheckBoundaries(int xPlayer,int yPlayer,int outer,int inner)
    {
        //bottom row
        if (yPlayer < inner && xPlayer == outer || xPlayer == Width)
            return true;

        //left column
        if (yPlayer >= inner && yPlayer <= Height - inner)
            if (xPlayer == outer || xPlayer == inner)
                return true;

        //top row
        if (yPlayer > Height - inner && xPlayer == outer || xPlayer == Width)
            return true;

        //right column
        if (yPlayer >= inner && yPlayer <= Height - inner)
            if (xPlayer == Width-inner || xPlayer == Width)
                return true;

        return false;
    }

    public static async Task DrawLine(Canvas2DContext context, Line line)
    {
    await context.BeginPathAsync();
    await context.MoveToAsync(line.startX, line.startY);
    await context.LineToAsync(line.endX, line.endY);
    await context.SetLineWidthAsync(line.thickness);

    // set line color
    await context.SetStrokeStyleAsync(line.color);
    await context.StrokeAsync();
    }


    private HubConnection? hubConnection;
    private ILobbyService lobbyService;

    private bool HasJoinedLobby = false;
    private string currentLobbyCode = "-";

    private string? codeInput;
    private List<string> messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .WithAutomaticReconnect()
            .Build();

        // TODO: Check if player was in a lobby previously

        hubConnection.On<string>("JoinLobby", (message) =>
        {
            var encodedMsg = $"{message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("RemoveFromLobby", (message) =>
        {
            var encodedMsg = $"{message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task InitiateNewLobby()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("CreateNewLobby");

            hubConnection.On<string, string>("CreateLobby", (message, lobbyCode) =>
            {
                var encodedMsg = $"{message}";
                currentLobbyCode = $"{lobbyCode}";
                messages.Add(encodedMsg);
                InvokeAsync(StateHasChanged);
            });

            HasJoinedLobby = true;
        }
    }

    private async Task JoinExistingLobby()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("AddToLobby", codeInput);
            currentLobbyCode = $"{codeInput}";
            HasJoinedLobby = true;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RemoveFromLobby", currentLobbyCode);
            await hubConnection.DisposeAsync();
        }
    }
}
