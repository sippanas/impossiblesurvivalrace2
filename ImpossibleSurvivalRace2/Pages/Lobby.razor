@page "/"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using ImpossibleSurvivalRace2.Server.Hubs
@using ImpossibleSurvivalRace2.Services
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using Blazor.Extensions.Canvas.Canvas2D
@using ImpossibleSurvivalRace2.Shared.Models
@using ImpossibleSurvivalRace2.Server
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@using ProxyDesignPattern

<style>
    body {
        background-color: #EFDECD;
    }

    /* Values should match constants in Constants.cs file */
    .canvas-div {
        width: 1400px;
        height: 500px;
    }
</style>

<PageTitle>ImpossibleSurvivalRace2</PageTitle>

<div class="form-group" hidden="@HasJoinedLobby">
    <div class="form-group">
        <label>
            Username:
            <input @bind="UserNameInput" placeholder="@inputUserWarningText" />
        </label>
        <label>
            Lobby code:
            <input @bind="codeInput" placeholder="@inputCodeWarningText" />
        </label>
        <button id="buttonCenter" class="btn btn-primary" @onclick="JoinExistingLobby">Join existing lobby</button>
    </div>
    <button id="buttonCenter2" class="btn btn-success" @onclick="InitiateNewLobby">Create new lobby</button>

</div>

<div class="form-group" hidden="@(!HasJoinedLobby || gameStarted)">

    <p>Current lobby: <b>@currentLobbyCode</b></p>

    <p>Lobby messages:</p>
    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>

    <button id="buttonCenter3" class="btn btn-success" hidden="@(!IsCreator)" @onclick="StartGameAsHost">Start game</button>
</div>

<div class="canvas-div" @ref=@(testRef) tabindex="1" @onkeydown="@Move" hidden="@(!gameStarted)">
    <BECanvas Width="@Constants.CANVAS_WIDTH" Height="@Constants.CANVAS_HEIGHT" @ref="_canvasReference"> </BECanvas>
</div>

@code {
    //map variables
    Canvas2DContext _context;
    BECanvasComponent _canvasReference;
    int outer = 0;
    int inner = 30;
    string mapColor = "#9F8170";

    int startLineCenterX;
    int startLineCenterY;

    //other variables
    private Player player = null;
    public HubConnection? hubConnection;

    bool gameStarted = false;
    private bool HasJoinedLobby = false;
    private bool HasBeenSpawned = false;
    private bool IsCreator = false;
    private string currentLobbyCode = "-";

    private string? UserNameInput;
    private string? codeInput;

    // Key variables
    private bool KeyIsPressed = false;

    private string? inputUserWarningText;
    private string? inputCodeWarningText;

    private List<string> messages = new List<string>();

    int leftDir = 10;
    int topDir = 470;
    private ElementReference testRef;

    MovementProxy proxy = new MovementProxy();

    Task Move(KeyboardEventArgs e)
    {
        KeyIsPressed = true;

        switch (e.Code)
        {
            case "ArrowDown":
                if (IsPlayerWithinPositiveBoundaries(topDir, Constants.PLAYER_SIZE, Constants.CANVAS_HEIGHT))
                {
                    topDir = proxy.Down(topDir);
                }
                break;
            case "ArrowUp":
                if (IsPlayerWithinNegativeBoundaries(topDir, Constants.PLAYER_SIZE, 0))
                {
                    topDir = proxy.Up(topDir);
                }
                break;
            case "ArrowLeft":
                if (IsPlayerWithinNegativeBoundaries(leftDir, Constants.PLAYER_SIZE, 0))
                {
                    leftDir = proxy.Left(leftDir);
                }
                break;
            case "ArrowRight":
                if (IsPlayerWithinPositiveBoundaries(leftDir, Constants.PLAYER_SIZE, Constants.CANVAS_WIDTH))
                {
                    leftDir = proxy.Right(leftDir);
                }
                break;
            default:
                break;
        }
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this._context = await _canvasReference.CreateCanvas2DAsync();

        //await testRef.FocusAsync();

        // If a key was pressed, we empty the canvas for redrawing
        if (KeyIsPressed)
        {
            await _context.ClearRectAsync(0, 0, Constants.CANVAS_WIDTH, Constants.CANVAS_HEIGHT);
            KeyIsPressed = false;
        }

        // Outer stroke rectangle
        await _context.StrokeRectAsync(0, 0, Constants.CANVAS_WIDTH, Constants.CANVAS_HEIGHT);
        // Inner stroke rectangle
        await _context.StrokeRectAsync(50, 50, Constants.CANVAS_WIDTH - 100, Constants.CANVAS_HEIGHT - 100);

        // Player drawing
        if (gameStarted)
        {
            // Drawing local player
            await DrawPlayer(this.player, this._context, leftDir, topDir, true);

            hubConnection.On<string, Player, int, int>("PlayerMovedAction", async (lobby, otherPlayer, ox, oy) =>
            {
                if (otherPlayer.ConnectionId != this.player.ConnectionId)
                {
                    await DrawPlayer(otherPlayer, this._context, ox, oy, false);
                    Console.WriteLine($"[Lobby #{currentLobbyCode}] Player [{player.UserName}] has invoked players [{otherPlayer.UserName}] movement");
                }
            });
        }
    }

    public bool IsPlayerWithinPositiveBoundaries(int pos, int playerSize, int canvasMax)
    {
        return !(pos + playerSize >= canvasMax);
    }

    private bool IsPlayerWithinNegativeBoundaries(int pos, int playerSize, int canvasMin)
    {
        return !(pos - playerSize <= 0);
    }

    public static async Task DrawDot(Canvas2DContext context, Dot dot)
    {
        await context.BeginPathAsync();
        await context.ArcAsync(dot.startX, dot.startY, dot.radius, dot.startAngle, dot.endAngle, true);
        await context.FillAsync();
        await context.SetFillStyleAsync(dot.color);
    }

    // Method used for host player
    public async void StartGameAsHost()
    {
        gameStarted = true;

        try
        {
            await hubConnection.InvokeAsync("GameStart", currentLobbyCode);
            Console.WriteLine($"Lobby Code: {currentLobbyCode} | Game has started");
        }
        catch (Exception)
        {
            throw;
        }
    }

    // Method used for local player
    public void StartGameAsPlayer()
    {
        gameStarted = true;
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("JoinLobby", (message) =>
        {
            var encodedMsg = $"{message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("RemoveFromLobby", (message) =>
        {
            var encodedMsg = $"{message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        // Game actions
        // -------------
        // GameStartedAction listener (waits for Game started signal from lobby host)
        hubConnection.On<string>("GameStartedAction", (lobbyCode) =>
        {
            this.StartGameAsPlayer();
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task InitiateNewLobby()
    {
        if (hubConnection is not null)
        {
            if (!string.IsNullOrWhiteSpace(UserNameInput))
            {
                inputUserWarningText = "";

                CreatePlayer(UserNameInput); // Create a player if it doesn't exist

                await hubConnection.SendAsync("CreateNewLobby", player);

                hubConnection.On<string, string>("CreateLobby", (message, lobbyCode) =>
                {
                    var encodedMsg = $"{message}";
                    currentLobbyCode = $"{lobbyCode}";
                    messages.Add(encodedMsg);
                    InvokeAsync(StateHasChanged);
                });
                IsCreator = true;
                HasJoinedLobby = true;
            }
            else
                inputUserWarningText = "Username is not valid";
        }
    }

    private async Task JoinExistingLobby()
    {
        if (hubConnection is not null)
        {
            if (!string.IsNullOrWhiteSpace(UserNameInput))
            {
                inputUserWarningText = "";
                if (!string.IsNullOrWhiteSpace(codeInput))
                {
                    inputCodeWarningText = "";
                    CreatePlayer(UserNameInput); // Create a player if doesn't exist

                    await hubConnection.SendAsync("AddToLobby", codeInput, player);
                    currentLobbyCode = $"{codeInput}";
                    HasJoinedLobby = true;
                }
                else
                    inputCodeWarningText = "Lobby code is not valid";
            }
            else
                inputUserWarningText = "Username is not valid";
        }
    }

    private void CreatePlayer(string userNameInput)
    {
        if (this.player == null)
        {
            var random = new Random();
            string[] colorList = new string[] { "red", "purple", "green", "blue", "brown", "orange", "pink" };
            string randomColor = colorList[random.Next(0, colorList.Length - 1)];

            player = new Player
            {
                ConnectionId = hubConnection.ConnectionId,
                UserName = userNameInput.Trim(),
                Color = randomColor
            };
        }
    }

    public async Task DrawPlayer(Player player, Canvas2DContext context, int x, int y, bool isLocalPlayer)
    {
        //await context.ClearRectAsync(x - 10, y - 10, 20, 20);
        Dot dot = new Dot(x, y, 5, 0, Math.PI * 2, player.Color);
        await DrawDot(context, dot);
        await context.EndBatchAsync();

        if(isLocalPlayer && ServerUtils.CanUpdate())
        {
            // If the player is local, we send others that his movement has updated
            await hubConnection.InvokeAsync("MovePlayer", currentLobbyCode, player, x, y);
            Console.WriteLine($"[Lobby #{currentLobbyCode}] Player [{player.UserName} | {player.Color}] has moved to ({x}, {y})");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RemoveFromLobby", currentLobbyCode);
            await hubConnection.DisposeAsync();
        }
    }

    public enum Movement
    {
        Wandering,
        Strafe,
        SlowStrafe,
        Follow
    }
}
