@page "/"

@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using ImpossibleSurvivalRace2.Server.Hubs
@using ImpossibleSurvivalRace2.Services
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using Blazor.Extensions.Canvas.Canvas2D
@using ImpossibleSurvivalRace2.Shared.Models
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime


<PageTitle>Lobby</PageTitle>

<div class="form-group" hidden="@HasJoinedLobby">
    <div class="form-group">
        <label>
            Username: 
            <input @bind="UserNameInput"/>
        </label>
        <label> 
            Lobby code:
            <input @bind="codeInput" />
        </label>
        <button id="buttonCenter" class="btn btn-primary" @onclick="JoinExistingLobby">Join existing lobby</button>
    </div>
    <button id="buttonCenter2" class="btn btn-success" @onclick="InitiateNewLobby">Create new lobby</button>

</div>

<div class="form-group" hidden="@(!HasJoinedLobby || gameStarted)">

    <p>Current lobby: <b>@currentLobbyCode</b></p>

    <p>Lobby messages:</p>
    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>

    <button id="buttonCenter3" class="btn btn-success" @onclick="Startgame">Start game</button>
   
</div>

<div class="form-group" hidden="@(!gameStarted)">
<BECanvas Width="@Width" Height="@Height"  @ref="_canvasReference"> </BECanvas>
</div>

@code {
    Canvas2DContext _context;
    BECanvasComponent _canvasReference;
    int outer;
    int inner;
    int Width=1400;
    int Height=500;
    string color="red";
    bool gameStarted = false;
    int startLineCenterX;
    int startLineCenterY;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        outer=10;
        inner = 30;
        this._context = await _canvasReference.CreateCanvas2DAsync();

        //isorinis loopas
        Line line1 = new Line(outer, outer, outer, Height, 3, "brown");
        await DrawLine(_context, line1);

        Line line2 = new Line(outer, Height, Width, Height, 3, "brown");
        await DrawLine(_context, line2);

        Line line3 = new Line(Width, Height, Width, outer, 3, "brown");
        await DrawLine(_context, line3);

        Line line4 = new Line(Width, outer, outer, outer, 3, "brown");
        await DrawLine(_context, line4);

        //vidinis loopas
        Line line5 = new Line(inner, inner, inner, Height-inner, 3, "brown");
        await DrawLine(_context, line5);

        Line line6 = new Line(inner, Height-inner, Width-inner, Height-inner, 3, "brown");
        await DrawLine(_context, line6);

        Line line7 = new Line(Width-inner, Height-inner, Width-inner, inner, 3, "brown");
        await DrawLine(_context, line7);

        Line line8 = new Line(Width-inner, inner,inner, inner, 3, "brown");
        await DrawLine(_context, line8);

        startLineCenterY = Height - inner;
        startLineCenterX=(inner-outer)/ 2;

        //start line
        Line line9 = new Line(outer, Height - inner, inner, Height - inner, 3, "red");
        await DrawLine(_context, line9);

        await SpawnPlayer(int.Parse(currentLobbyCode));
    }

    private bool CheckBoundaries(int xPlayer,int yPlayer,int outer,int inner)
    {
        //bottom row
        if (yPlayer < inner && xPlayer == outer || xPlayer == Width)
            return true;

        //left column
        if (yPlayer >= inner && yPlayer <= Height - inner)
            if (xPlayer == outer || xPlayer == inner)
                return true;

        //top row
        if (yPlayer > Height - inner && xPlayer == outer || xPlayer == Width)
            return true;

        //right column
        if (yPlayer >= inner && yPlayer <= Height - inner)
            if (xPlayer == Width-inner || xPlayer == Width)
                return true;

        return false;
    }

    public static async Task DrawLine(Canvas2DContext context, Line line)
    {
        await context.BeginPathAsync();
        await context.MoveToAsync(line.startX, line.startY);
        await context.LineToAsync(line.endX, line.endY);
        await context.SetLineWidthAsync(line.thickness);

        // set line color
        await context.SetStrokeStyleAsync(line.color);
        await context.StrokeAsync();
    }

    public static async Task DrawDot(Canvas2DContext context, Dot dot)
    {
        await context.MoveToAsync(dot.startX, dot.startY);
        await context.ArcAsync(dot.startX, dot.startY, dot.radius, dot.startAngle, dot.endAngle, true);
        await context.FillAsync();
        await context.SetFillStyleAsync(dot.color);
    }

    public void Startgame()
    {
        gameStarted = true;
    }

    private Player player = null;
    private HubConnection? hubConnection;
    private ILobbyService lobbyService;

    private bool HasJoinedLobby = false;
    private bool HasBeenSpawned = false;
    private string currentLobbyCode = "0";

    private string? UserNameInput;
    private string? codeInput;
    private List<string> messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .WithAutomaticReconnect()
            .Build();

        // TODO: Check if player was in a lobby previously

        hubConnection.On<string>("JoinLobby", (message) =>
        {
            var encodedMsg = $"{message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("RemoveFromLobby", (message) =>
        {
            var encodedMsg = $"{message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task InitiateNewLobby()
    {
        if (hubConnection is not null)
        {
            CreatePlayer(UserNameInput); // Create a player if it doesn't exist

            await hubConnection.SendAsync("CreateNewLobby", player);

            hubConnection.On<string, int>("CreateLobby", (message, lobbyCode) =>
            {
                var encodedMsg = $"{message}";
                currentLobbyCode = $"{lobbyCode}";
                messages.Add(encodedMsg);
                InvokeAsync(StateHasChanged);
            });

            HasJoinedLobby = true;
        }
    }

    private async Task JoinExistingLobby()
    {
        if (hubConnection is not null)
        {
            CreatePlayer(UserNameInput); // Create a player if doesn't exist

            await hubConnection.SendAsync("AddToLobby", codeInput, player);
            currentLobbyCode = $"{codeInput}";
            HasJoinedLobby = true;
        }
    }
    public Random random { get { return new Random(); } }

    private async Task SpawnPlayer(int lobbyCode)
    {
        if (HasJoinedLobby && !HasBeenSpawned)
        {
            int x;
            int y;
            List<Player> currPlayers = new List<Player>();
            string[] colorList = new string[] { "red", "purple", "green", "blue", "brown", "orange", "pink" };
            string randomColor = colorList[random.Next(0, colorList.Length - 1)];

         //   currPlayers = await lobbyService.GetPlayers(lobbyCode); neveikia

            switch (currPlayers.Count())
            {
                case 0:
                    x = startLineCenterX + 10 + currPlayers.Count() * 3;
                    y = startLineCenterY + 5;
                    Dot dot = new Dot(x, y, 5, 12, Math.PI * 2, randomColor);
                    await DrawDot(_context, dot);
                    break;
                case 1:
                    x = startLineCenterX + 10 + currPlayers.Count() * 3;
                    y = startLineCenterY + 5;
                    dot = new Dot(x, y, 5, 12, Math.PI * 2, randomColor);
                    await DrawDot(_context, dot);
                    break;
                case 2:
                    x = startLineCenterX + 10 + currPlayers.Count() * 3;
                    y = startLineCenterY + 5;
                    dot = new Dot(x, y, 5, 12, Math.PI * 2, randomColor);
                    await DrawDot(_context, dot);
                    break;
                case 3:
                    x = startLineCenterX + 10 + currPlayers.Count() * 3;
                    y = startLineCenterY + 5;
                    dot = new Dot(x, y, 5, 12, Math.PI * 2, randomColor);
                    await DrawDot(_context, dot);
                    break;
            }
        }

    }

    private void CreatePlayer(string userNameInput)
    {
        if (this.player == null)
        {
            player = new Player
            {
                ConnectionId = hubConnection.ConnectionId,
                UserName = userNameInput
            };
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RemoveFromLobby", currentLobbyCode);
            await hubConnection.DisposeAsync();
        }
    }
}
